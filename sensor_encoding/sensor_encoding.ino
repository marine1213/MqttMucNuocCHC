byte inPort[] = {3,4,5,6,7,8,9,10,25,12,23,14,15,16,17};
const byte inPortLen = 15;
byte outPort[] = {A0,A1,A2,A3,A4,A5};
const byte outPortLen = 6;

void setup() {
  // put your setup code here, to run once:
  for(byte i = 0; i < inPortLen ; i++){pinMode(inPort[i] ,INPUT );}
  for(byte i = 0; i < outPortLen; i++){pinMode(outPort[i],OUTPUT);}
  pinMode(A2, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  // load data into register
  int r = 0;
  for(byte id = 0; id < inPortLen ; id++){ r=r|(digitalRead(inPort[id])<<id);  Serial.println(digitalRead(inPort[id]));} // 0,1,3,7,15
  Serial.println("\nregister:");
  Serial.println(r);
  // check if the logic is good 
  // convert input to output
  byte out=0;
  switch(r){
    case 0x0000: 
    case 0x2000:
    case 0x2010: out = B010001; break;
    case 0x4000: out = B010000; break;
    case 0x6000:
    case 0x6001:
    case 0x6002:
    case 0x6003:
    case 0x6004:
    case 0x6005:
    case 0x6006:
    case 0x6007:
    case 0x6008:
    case 0x6009:
    case 0x600A:
    case 0x600B:
    case 0x600C:
    case 0x600D:
    case 0x600E:
    case 0x600F:
    case 0x6010:
    case 0x6011:
    case 0x6012:
    case 0x6013:
    case 0x6014:
    case 0x6015:
    case 0x6016:
    case 0x6017:
    case 0x6018:
    case 0x6019:
    case 0x601A:
    case 0x601B:
    case 0x601C:
    case 0x601D:
    case 0x601E:
    case 0x601F:
    case 0x6020:
    case 0x6021:
    case 0x6022:
    case 0x6023:
    case 0x6024:
    case 0x6025:
    case 0x6026:
    case 0x6027:
    case 0x6028:
    case 0x6029:
    case 0x602A:
    case 0x602B:
    case 0x602C:
    case 0x602D:
    case 0x602E:
    case 0x602F:
    case 0x6030:
    case 0x6031:
    case 0x6032:
    case 0x6033:
    case 0x6034:
    case 0x6035:
    case 0x6036:
    case 0x6037:
    case 0x6038:
    case 0x6039:
    case 0x603A:
    case 0x603B:
    case 0x603C:
    case 0x603D:
    case 0x603E:
    case 0x603F:
    case 0x6040:
    case 0x6041:
    case 0x6042:
    case 0x6043:
    case 0x6044:
    case 0x6045:
    case 0x6046:
    case 0x6047:
    case 0x6048:
    case 0x6049:
    case 0x604A:
    case 0x604B:
    case 0x604C:
    case 0x604D:
    case 0x604E:
    case 0x604F:
    case 0x6050:
    case 0x6051:
    case 0x6052:
    case 0x6053:
    case 0x6054:
    case 0x6055:
    case 0x6056:
    case 0x6057:
    case 0x6058:
    case 0x6059:
    case 0x605A:
    case 0x605B:
    case 0x605C:
    case 0x605D:
    case 0x605E:
    case 0x605F:
    case 0x6060:
    case 0x6061:
    case 0x6062:
    case 0x6063:
    case 0x6064:
    case 0x6065:
    case 0x6066:
    case 0x6067:
    case 0x6068:
    case 0x6069:
    case 0x606A:
    case 0x606B:
    case 0x606C:
    case 0x606D:
    case 0x606E:
    case 0x606F:
    case 0x6070:
    case 0x6071:
    case 0x6072:
    case 0x6073:
    case 0x6074:
    case 0x6075:
    case 0x6076:
    case 0x6077:
    case 0x6078:
    case 0x6079:
    case 0x607A:
    case 0x607B:
    case 0x607C:
    case 0x607D:
    case 0x607E:
    case 0x607F:
    case 0x6080:
    case 0x6081:
    case 0x6082:
    case 0x6083:
    case 0x6084:
    case 0x6085:
    case 0x6086:
    case 0x6087:
    case 0x6088:
    case 0x6089:
    case 0x608A:
    case 0x608B:
    case 0x608C:
    case 0x608D:
    case 0x608E:
    case 0x608F:
    case 0x6090:
    case 0x6091:
    case 0x6092:
    case 0x6093:
    case 0x6094:
    case 0x6095:
    case 0x6096:
    case 0x6097:
    case 0x6098:
    case 0x6099:
    case 0x609A:
    case 0x609B:
    case 0x609C:
    case 0x609D:
    case 0x609E:
    case 0x609F:
    case 0x60A0:
    case 0x60A1:
    case 0x60A2:
    case 0x60A3:
    case 0x60A4:
    case 0x60A5:
    case 0x60A6:
    case 0x60A7:
    case 0x60A8:
    case 0x60A9:
    case 0x60AA:
    case 0x60AB:
    case 0x60AC:
    case 0x60AD:
    case 0x60AE:
    case 0x60AF:
    case 0x60B0:
    case 0x60B1:
    case 0x60B2:
    case 0x60B3:
    case 0x60B4:
    case 0x60B5:
    case 0x60B6:
    case 0x60B7:
    case 0x60B8:
    case 0x60B9:
    case 0x60BA:
    case 0x60BB:
    case 0x60BC:
    case 0x60BD:
    case 0x60BE:
    case 0x60BF:
    case 0x60C0:
    case 0x60C1:
    case 0x60C2:
    case 0x60C3:
    case 0x60C4:
    case 0x60C5:
    case 0x60C6:
    case 0x60C7:
    case 0x60C8:
    case 0x60C9:
    case 0x60CA:
    case 0x60CB:
    case 0x60CC:
    case 0x60CD:
    case 0x60CE:
    case 0x60CF:
    case 0x60D0:
    case 0x60D1:
    case 0x60D2:
    case 0x60D3:
    case 0x60D4:
    case 0x60D5:
    case 0x60D6:
    case 0x60D7:
    case 0x60D8:
    case 0x60D9:
    case 0x60DA:
    case 0x60DB:
    case 0x60DC:
    case 0x60DD:
    case 0x60DE:
    case 0x60DF:
    case 0x60E0:
    case 0x60E1:
    case 0x60E2:
    case 0x60E3:
    case 0x60E4:
    case 0x60E5:
    case 0x60E6:
    case 0x60E7:
    case 0x60E8:
    case 0x60E9:
    case 0x60EA:
    case 0x60EB:
    case 0x60EC:
    case 0x60ED:
    case 0x60EE:
    case 0x60EF:
    case 0x60F0:
    case 0x60F1:
    case 0x60F2:
    case 0x60F3:
    case 0x60F4:
    case 0x60F5:
    case 0x60F6:
    case 0x60F7:
    case 0x60F8:
    case 0x60F9:
    case 0x60FA:
    case 0x60FB:
    case 0x60FC:
    case 0x60FD:
    case 0x60FE:
    case 0x60FF:
    out = B001111; break;
    case 0x7000: out = B001110; break;
    case 0x7800: out = B001101; break;
    case 0x7C00: out = B001100; break;
    case 0x7E00: out = B001011; break;
    case 0x7F00: 
    case 0x7F01: 
    case 0x7F02: 
    case 0x7F03: 
    case 0x7F04: 
    case 0x7F05: 
    case 0x7F06: 
    case 0x7F07: 
    case 0x7F08: 
    case 0x7F09: 
    case 0x7F0A: 
    case 0x7F0B: 
    case 0x7F0C: 
    case 0x7F0D: 
    case 0x7F0E: 
    case 0x7F0F: 
    case 0x7F10: 
    case 0x7F11: 
    case 0x7F12: 
    case 0x7F13: 
    case 0x7F14: 
    case 0x7F15: 
    case 0x7F16: 
    case 0x7F17: 
    case 0x7F18: 
    case 0x7F19: 
    case 0x7F1A: 
    case 0x7F1B: 
    case 0x7F1C: 
    case 0x7F1D: 
    case 0x7F1E: 
    case 0x7F1F:
    case 0x7F20: 
    case 0x7F21: 
    case 0x7F22: 
    case 0x7F23: 
    case 0x7F24: 
    case 0x7F25: 
    case 0x7F26: 
    case 0x7F27: 
    case 0x7F28: 
    case 0x7F29: 
    case 0x7F2A: 
    case 0x7F2B: 
    case 0x7F2C: 
    case 0x7F2D: 
    case 0x7F2E: 
    case 0x7F2F:
    case 0x7F30: 
    case 0x7F31: 
    case 0x7F32: 
    case 0x7F33: 
    case 0x7F34: 
    case 0x7F35: 
    case 0x7F36: 
    case 0x7F37: 
    case 0x7F38: 
    case 0x7F39: 
    case 0x7F3A: 
    case 0x7F3B: 
    case 0x7F3C: 
    case 0x7F3D: 
    case 0x7F3E: 
    case 0x7F3F:
    case 0x7F40: 
    case 0x7F41: 
    case 0x7F42: 
    case 0x7F43: 
    case 0x7F44: 
    case 0x7F45: 
    case 0x7F46: 
    case 0x7F47: 
    case 0x7F48: 
    case 0x7F49: 
    case 0x7F4A: 
    case 0x7F4B: 
    case 0x7F4C: 
    case 0x7F4D: 
    case 0x7F4E: 
    case 0x7F4F:
    case 0x7F50: 
    case 0x7F51: 
    case 0x7F52: 
    case 0x7F53: 
    case 0x7F54: 
    case 0x7F55: 
    case 0x7F56: 
    case 0x7F57: 
    case 0x7F58: 
    case 0x7F59: 
    case 0x7F5A: 
    case 0x7F5B: 
    case 0x7F5C: 
    case 0x7F5D: 
    case 0x7F5E: 
    case 0x7F5F:
    case 0x7F60: 
    case 0x7F61: 
    case 0x7F62: 
    case 0x7F63: 
    case 0x7F64: 
    case 0x7F65: 
    case 0x7F66: 
    case 0x7F67: 
    case 0x7F68: 
    case 0x7F69: 
    case 0x7F6A: 
    case 0x7F6B: 
    case 0x7F6C: 
    case 0x7F6D: 
    case 0x7F6E: 
    case 0x7F6F:
    case 0x7F70: 
    case 0x7F71: 
    case 0x7F72: 
    case 0x7F73: 
    case 0x7F74: 
    case 0x7F75: 
    case 0x7F76: 
    case 0x7F77: 
    case 0x7F78: 
    case 0x7F79: 
    case 0x7F7A: 
    case 0x7F7B: 
    case 0x7F7C: 
    case 0x7F7D: 
    case 0x7F7E: 
    case 0x7F7F: out = B001010; break;
    case 0x7F80:
    case 0x7F81:
    case 0x7F82:
    case 0x7F83:
    case 0x7F84:
    case 0x7F85:
    case 0x7F86:
    case 0x7F87:
    case 0x7F88:
    case 0x7F89:
    case 0x7F8A:
    case 0x7F8B:
    case 0x7F8C:
    case 0x7F8D:
    case 0x7F8E:
    case 0x7F8F:
    case 0x7F90:
    case 0x7F91:
    case 0x7F92:
    case 0x7F93:
    case 0x7F94:
    case 0x7F95:
    case 0x7F96:
    case 0x7F97:
    case 0x7F98:
    case 0x7F99:
    case 0x7F9A:
    case 0x7F9B:
    case 0x7F9C:
    case 0x7F9D:
    case 0x7F9E:
    case 0x7F9F: 
    case 0x7FA0:
    case 0x7FA1:
    case 0x7FA2:
    case 0x7FA3:
    case 0x7FA4:
    case 0x7FA5:
    case 0x7FA6:
    case 0x7FA7:
    case 0x7FA8:
    case 0x7FA9:
    case 0x7FAA:
    case 0x7FAB:
    case 0x7FAC:
    case 0x7FAD:
    case 0x7FAE:
    case 0x7FAF:
    case 0x7FB0:
    case 0x7FB1:
    case 0x7FB2:
    case 0x7FB3:
    case 0x7FB4:
    case 0x7FB5:
    case 0x7FB6:
    case 0x7FB7:
    case 0x7FB8:
    case 0x7FB9:
    case 0x7FBA:
    case 0x7FBB:
    case 0x7FBC:
    case 0x7FBD:
    case 0x7FBE:
    case 0x7FBF:out = B001001; break;
    case 0x7FC0: 
    case 0x7FC1: 
    case 0x7FC2: 
    case 0x7FC3: 
    case 0x7FC4: 
    case 0x7FC5: 
    case 0x7FC6: 
    case 0x7FC7: 
    case 0x7FC8: 
    case 0x7FC9: 
    case 0x7FCA: 
    case 0x7FCB: 
    case 0x7FCC: 
    case 0x7FCD: 
    case 0x7FCE: 
    case 0x7FCF: 
    case 0x7FD0: 
    case 0x7FD1: 
    case 0x7FD2: 
    case 0x7FD3: 
    case 0x7FD4: 
    case 0x7FD5: 
    case 0x7FD6: 
    case 0x7FD7: 
    case 0x7FD8: 
    case 0x7FD9: 
    case 0x7FDA: 
    case 0x7FDB: 
    case 0x7FDC: 
    case 0x7FDD: 
    case 0x7FDE: 
    case 0x7FDF: out = B000111; break;
    case 0x7FE0: 
    case 0x7FE1: 
    case 0x7FE2: 
    case 0x7FE3: 
    case 0x7FE4: 
    case 0x7FE5: 
    case 0x7FE6: 
    case 0x7FE7: 
    case 0x7FE8: 
    case 0x7FE9: 
    case 0x7FEA: 
    case 0x7FEB: 
    case 0x7FEC: 
    case 0x7FED: 
    case 0x7FEE: 
    case 0x7FEF: out = B000110; break;
    case 0x7FF0: 
    case 0x7FF1: 
    case 0x7FF2: 
    case 0x7FF3: 
    case 0x7FF4: 
    case 0x7FF5: 
    case 0x7FF6: 
    case 0x7FF7: out = B000101; break;
    case 0x7FF8: 
    case 0x7FF9: 
    case 0x7FFA: 
    case 0x7FFB: out = B000100; break;
    case 0x7FFC:
    case 0x7FFD: out = B000011; break;
    case 0x7FFE: out = B000010; break;
    case 0x7FFF: out = B000001; break;
    default: out = 0; ;break;
  }
  // print output to port
//   out =0xff;
  Serial.println(out);
  for(byte i = 0; i < outPortLen; i++){digitalWrite(outPort[i],(out>>i)&1);}

  delay(500);
}
